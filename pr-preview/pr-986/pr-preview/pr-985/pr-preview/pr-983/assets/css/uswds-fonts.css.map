{"version":3,"sources":["../node_modules/uswds/dist/scss/core/mixins/_font-face.scss"],"names":[],"mappings":"AAQE,WACE,2BAAA,CACA,iBAAA,CACA,eAsBM,CArBN,qBAAA,CACA,0KAAA,CALF,WACE,2BAAA,CACA,iBAAA,CACA,eAsBM,CArBN,qBAAA,CACA,6KAAA,CALF,WACE,2BAAA,CACA,iBAAA,CACA,eAsBM,CArBN,qBAAA,CACA,qMAAA,CALF,WACE,+BAAA,CACA,iBAAA,CACA,eAsBM,CArBN,qBAAA,CACA,0KAAA,CALF,WACE,+BAAA,CACA,iBAAA,CACA,eAsBM,CArBN,qBAAA,CACA,6KAAA,CALF,WACE,4BAAA,CACA,iBAAA,CACA,eAsBM,CArBN,qBAAA,CACA,gOAAA,CALF,WACE,4BAAA,CACA,iBAAA,CACA,eAsBM,CArBN,qBAAA,CACA,sOAAA,CALF,WACE,4BAAA,CACA,iBAAA,CACA,eAsBM,CArBN,qBAAA,CACA,6NAAA,CALF,WACE,4BAAA,CACA,iBAAA,CACA,eAsBM,CArBN,qBAAA,CACA,gOAAA,CALF,WACE,4BAAA,CACA,iBAAA,CACA,eAsBM,CArBN,qBAAA,CACA,kPAAA,CALF,WACE,4BAAA,CACA,iBAAA,CACA,eAsBM,CArBN,qBAAA,CACA,mOAAA,CALF,WACE,4BAAA,CACA,iBAAA,CACA,eAsBM,CArBN,qBAAA,CACA,+OAAA,CALF,WACE,4BAAA,CACA,iBAAA,CACA,eAsBM,CArBN,qBAAA,CACA,kPAAA","file":"uswds-fonts.css","sourcesContent":["// Output the @font-face rule\n@mixin at-font-face($display-name, $file-path, $font-weight, $font-style) {\n  $file-path: unquote($file-path);\n\n  // TODO: If $theme-use-rails-pipeline use font-url() statements\n  // instead of url()\n  // Dunno why I can't do this without an error...\n\n  @font-face {\n    font-family: unquote($display-name);\n    font-style: unquote($font-style);\n    font-weight: $font-weight;\n    font-display: fallback;\n    src: url(#{$file-path}.woff2) format(\"woff2\"),\n      url(#{$file-path}.woff) format(\"woff\"),\n      url(#{$file-path}.ttf) format(\"truetype\");\n  }\n}\n\n// Loop through weights, then call at-font-face\n@mixin generate-font-face(\n  $font-style-src,\n  $output-weights,\n  $display-name,\n  $dir,\n  $font-style\n) {\n  @each $font-weight, $filename in $font-style-src {\n    @each $key, $output-weight in $output-weights {\n      @if $output-weight == $font-weight and $filename {\n        @include at-font-face(\n          \"#{$display-name}\",\n          \"#{$theme-font-path}/#{$dir}/#{$filename}\",\n          #{$font-weight},\n          unquote(\"#{$font-style}\")\n        );\n      }\n    }\n  }\n}\n\n// Collect all font metadata, then call generate-font-face\n@mixin render-font-face($typeface-token, $src) {\n  $generate: false;\n  $this-src: ();\n  $output-weights: $project-font-weights;\n  @if $theme-generate-all-weights {\n    $output-weights: (\n      100: 100,\n      200: 200,\n      300: 300,\n      400: 400,\n      500: 500,\n      600: 600,\n      700: 700,\n      800: 800,\n      900: 900,\n    );\n  }\n\n  $typeface-metadata: map-get($all-typeface-tokens, $typeface-token);\n\n  // If the typeface has src in its USWDS metadata, generate and\n  // set $this-src\n  @if map-get($typeface-metadata, src) {\n    $generate: true;\n    $this-src: map-get($typeface-metadata, src);\n  }\n\n  // If the typeface has custom src sefined, generate and override\n  // any existing USWDS src\n  @if $src {\n    $generate: true;\n    $this-src: $src;\n  }\n\n  @if $generate {\n    $display-name: map-get($typeface-metadata, display-name);\n    $roman: map-get($this-src, roman);\n    $italic: map-get($this-src, italic);\n    $dir: map-get($this-src, dir);\n\n    @if $roman {\n      @include generate-font-face(\n        $roman,\n        $output-weights,\n        $display-name,\n        $dir,\n        normal\n      );\n    }\n\n    @if $italic {\n      @include generate-font-face(\n        $italic,\n        $output-weights,\n        $display-name,\n        $dir,\n        italic\n      );\n    }\n  }\n}\n"]}